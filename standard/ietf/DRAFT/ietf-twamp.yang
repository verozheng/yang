module ietf-twamp {
  namespace "urn:ietf:params:xml:ns:yang:twamp";
   //namespace need to be assigned by IANA
  prefix "ietf-twamp";
  
  import ietf-inet-types {
    prefix inet;
  }
  
  organization "IETF IPPM (IP Performance Metrics) Working Group";
  
  contact "draft-cmzrjp-ippm-twamp-yang@tools.ietf.org";
  
  description "TWAMP Data Model";
  
  revision "2015-05-05" {
    description "Initial version. RFC5357 is covered. 
    RFC5618, RFC5938 and RFC6038 are not covered.";
    reference "draft-cmzrjp-ippm-twamp-yang";
  }
  
  feature controlClient {
    description "This feature relates to the device functions as 
    the TWAMP Control-Client.";
  }

  feature server {
    description "This feature relates to the device functions as 
    the TWAMP Server.";
  }
  
  feature sessionSender {
    description "This feature relates to the device functions as 
    the TWAMP Session-Sender.";
  }
  
  feature sessionReflector {
    description "This feature relates to the device functions as 
    the TWAMP Session-Reflector.";
  }
  
  grouping maintenanceStatistics {
    description "Maintenace statistics grouping";
    leaf sentPackets {
      type uint32;
      config "false";
      description "Packets sent";
    }
    leaf rcvPackets {
      type uint32;
      config "false";
      description "Packets received";
    }
    leaf lastSendSeq {
      type uint32;
      config "false";
      description "Last sent sequence number";
    }
    leaf lastRcvSeq {
      type uint32;
      config "false";
      description "Last received sequence number";
    }
  }

  container twamp {
    description "Top level container";
    container twampClient {
      description "Twamp client container";
      presence "twampServer";
      if-feature controlClient;
      leaf clientAdminState {
        type boolean;
        mandatory "true";
        description "Indicates whether this device is allowed to run 
        TWAMP to initiate control/test sessions";
      }
      
      list modePreferenceChain {
        description "Authentication mode preference";
        key "priority";
        unique "mode";
        leaf priority {
          type uint16;
        }
        leaf mode {
          type enumeration {
            enum unauthenticated {
              value "1";
            }
            enum authenticated {
              value "2";
              }
            enum encrypted {
              value "4";
            }
            enum unauthtestencrpytcontrol {
              value "8";
            }
            enum individualsessioncontrol {
              value "16";
              }
            enum reflectoctets {
              value "32";
            }
            enum symmetricalsize {
              value "64";
            }
          }
          description "Authentication mode enumeration";
        }
      }
      
      list keyChain {
        description "Key chain";
        key "keyId";
        leaf keyId {
          type string {
            length "1..80";
          }
          description "KeyID";
        }
        leaf secretKey {
          type string;
          description "Secret key";
        }
      }

      list twampClientCtrlConnection {
        description "Twamp client control connections";
        key "ctrlConnectionName";
        leaf ctrlConnectionName {
          type string;
          description "A unique name used as a key to identify this
            individual TWAMP control connection on the
            Control-Client device.";
        }
        leaf clientIp {
          type inet:ip-address;
          description "Client IP address";
        }
        leaf serverIp {
          type inet:ip-address;
          description "Server IP address";
        }
        leaf serverTcpPort {
          type inet:port-number;
        }
        leaf dscp{
          type inet:dscp; 
          description "The DSCP value to be placed in the IP header
            of the TWAMP TCP Control packets generated
            by the Control-Client";
        }
        leaf keyId {
          type string {
            length "1..80";
          }
          description "Key ID";
        }
        leaf dkLen {
          type uint32;
          description "Intended length in octets of the derived key, 
          a positive integer, at most (2^32 - 1) * hLen.";
        }
        leaf clientTcpPort {
          type inet:port-number;
          config "false";
          description "Client TCP port";
        }
        leaf serverStartTime {
          type uint64;
          config "false";
          description "The Start-Time advertized by the Server in 
          the Server-Start message";
        }
        leaf ctrlConnectionState {
          type enumeration {
            enum active {
              description "Control session is active.";
            }
            enum idle {
              description "Control session is idle.";
            }
          }
          config "false";
          description "Control connection state";
        }
        leaf selectedMode {
            type enumeration {
            enum unauthenticated {
              value "1";
            }
            enum authenticated {
              value "2";
              }
            enum encrypted {
              value "4";
            }
            enum unauthtestencrpytcontrol {
              value "8";
            }
            enum individualsessioncontrol {
              value "16";
              }
            enum reflectoctets {
              value "32";
            }
            enum symmetricalsize {
              value "64";
            }
          }
          config "false";
          description "The mode that the Control-Client has chosen for 
          this control connection as set in the Mode field of the 
          Set-Up-Response message";
        }
        leaf token {
            type string {
            length "1..64";
          }
          config "false";
          description "64 octets, containing the concatenation of a 
            16-octet challenge, a 16-octet AES Session-key used
            for encryption, and a 32-octet HMAC-SHA1 Session-key
            used for authentication";
        }
        leaf clientIv{
          type string {
            length "1..16";
          }
          config "false";
          description "16 octets, Client-IV is generated randomly 
            by the Control-Client.";
        }
        
        list twampSessionRequest {
          description "Twamp session requests";
          key "testSessionName";            
          leaf testSessionName {
            type string;
            description "A unique name for this test session to be used 
            as a key for this test session on the Control-Client.";
          }
          leaf senderIp {
            type inet:ip-address;
            description "Sender IP address";
          }
          leaf senderUdpPort {
            type inet:port-number;
            description "Sender UDP port";
          }
          leaf reflectorIp {
            type inet:ip-address;
            description "Reflector IP address";
          }
          leaf reflectorUdpPort {
            type inet:port-number;
            description "Reflector UDP port";
          }
          leaf timeout {
            type uint64;
            description "The time Session-Reflector MUST wait after
                receiving a Stop-Session message";
          }
          leaf paddingLength {
            type uint32{
              range "64..1500";
            }
            description "The number of bytes of padding that should
                be added to the UDP test packets generated by the
                sender.";
          }
          leaf startTime {
            type uint64;
            description "Time when the session is to be started (but not 
            before the Start-Sessions command is issued).  This value is 
            placed in the Start Time field of the Request-TW-Session message.";
          }
          leaf repeat  {
            type boolean;
            description "If the test session is to be run repeatedly.";
          }
          leaf repeatInterval  {
            type uint32;
            description "Repeat interval (in minutes)";
            when "../repeat='true'";
          }
          leaf pmIndex {
            type uint16;
            description "Numerical index value of a Registered
                Metric in the Performance Metric Registry";
          }
          leaf testSessionState {
            description "Test session state";
            type enumeration {
              enum ok {
                value 0;
                description "Test session is accepted.";
              }
              enum failed {
                value 1;
                description "Failure, reason unspecified
                    (catch-all).";
              }
              enum internalError {
                value 2;
                description "Internal error.";
              }
              enum notSupported {
                value 3;
                description "Some aspect of request is not
                    supported.";
              }
              enum permanentResLimit {
                value 4;
                description "Cannot perform request due to
                    permanent resource limitations.";
              }
              enum tempResLimit {
                value 5;
                description "Cannot perform request due to
                    temporary resource limitations.";
              }
            }
            config "false";
          }
          leaf sid{
            description "The SID allocated by the Server for 
            this test session";
            type string;
            config "false";
          }
        }
      }
    }

    container twampServer{
      description "Twamp sever container";
      presence "twampServer";
      if-feature server;
      leaf serverAdminState{
        type boolean;
        mandatory "true";
        description "Indicates whether this device is allowed to run 
          TWAMP to respond to control/test sessions";
      }
      leaf serverTcpPort {
        type inet:port-number;
        default "862";
      }
      leaf servwait {
        type uint32 {
          range 1..604800;
        }
        default 900;
        description "SERVWAIT (TWAMP Control (TCP) session timeout), 
          default value is 900";
      }
      leaf dscp {
        type inet:dscp; 
        description "The DSCP value to be placed in the IP header
          of the TWAMP TCP Control packets generated by the Server";
      }
      leaf count {
        type uint32 {
          range 1024..4294967295;
        }
        description "Parameter used in deriving a key from a 
        shared secret ";
      }
      leaf maxCount {
        type uint32 {
          range 1024..4294967295;
        }
        default 32768;
        description "Max count value.";
      }
      leaf modes {
        description "The bit mask of TWAMP Modes this Server instance 
        is willing to support.";
        type bits {
          bit unauthenticated {
            position 0;
          }
          bit authenticated {
            position 1;
          }
          bit encrypted {
            position 2;
          }
        }
      }
      leaf salt{
        type string {
          length "1..16";
        }
        config "false";
        description "Salt MUST be generated pseudo-randomly";
      }   
      leaf serverIv {
        type string {
          length "1..16";
        }
        config "false";
        description "16 octets, Server-IV is generated randomly
          by the Control-Client.";
      }
      leaf challenge {
        type string {
          length "1..16";
        }
        config "false";
        description "Challenge is a random sequence of octets
          generated by the Server";
      }   
      
      list keyChain {
        description "KeyIDs with the respective secret keys.";
        key "keyId";
        leaf keyId {
          type string {
            length "1..80";
          }
          description "KeyIDs.";
        }
        leaf secretKey {
          type string;
          description "Secret keys.";
        }
      }
  
      list twampServerCtrlConnection {
        description "Twamp server control connections";
        key "clientIp clientTcpPort serverIp serverTcpPort";
        config "false";
        leaf clientIp {
          type inet:ip-address;
          description "Client IP address";
        }
        leaf clientTcpPort {
          type inet:port-number;
          description "Client TCP port";
        }
        leaf serverIp {
          type inet:ip-address;
          description "Server IP address";
        }
        leaf serverTcpPort {
          type inet:port-number;
          description "Server TCP port";
        }     
        leaf serverCtrlConnectionState {
          type enumeration {
            enum "active";
            enum "servwait";
          }
          description "Server control connection state";
        }
        leaf dscp {
          type inet:dscp; 
          description "The DSCP value used in the header of the TCP
            control packets sent by the Server for this control
            connection. This will usually be the same value as is
            configured for twampServer:dscp under the twampServer.
            However, in the event that the user re-configures
            twampServer:dscp after this control connection is already
            in progress, this read-only value will show the actual
            dscp value in use by this control connection.";
        }
        leaf selectedMode {
          type enumeration {
            enum unauthenticated {
              value "1";
            }
            enum authenticated {
              value "2";
              }
            enum encrypted {
              value "4";
            }
            enum unauthtestencrpytcontrol {
              value "8";
            }
            enum individualsessioncontrol {
              value "16";
              }
            enum reflectoctets {
              value "32";
            }
            enum symmetricalsize {
              value "64";
            }
          }
          description "The mode that was chosen for this control
            connection as set in the Mode field of the 
            Set-Up-Response message.";
        }
        leaf keyId {
          type string {
            length "1..80";
          }
          description "The keyId value that is in use by this control
            connection.";         
        }
        leaf dkLen {
          type uint32;
          description "The dkLen value that is in use by this control
            connection. This will usually be the same value as is
            configured under twampServer. In the event that the user
            re-configured twampServer:dkLen after this control
            connection is already in progress, this read-only value
            will show the different dkLen that is in use for this
            control connection.";
        }
        leaf count {
          type uint32 {
            range 1024..4294967295;
          }
          description "The count value that is in use by this control
            connection. This will usually be the same value as is
            configured under twampServer. However, in the event that
            the user re-configured twampServer:count after this 
            control connection is already in progress, this read-only 
            value will show the different count that is in use for 
            this control connection.";    
        }
        leaf maxCount {
          type uint32 {
            range 1024..4294967295;
          }
          description "The maxCount value that is in use by this
            control connection. This will usually be the same value
            as is configured under twampServer. However, in the event
            that the user re-configured twampServer:maxCount after
            this control connection is already in progress, this
            read-only value will show the different maxCount that is
            in use for this control connection.";   
        }   
      }
    }
  
    container twampSessionSender{
      description "Twamp session sender container";
      if-feature sessionSender;
      list twampSenderTestSession{
        description "Twamp sender test sessions";
        key "testSessionName";
        leaf testSessionName {
          type string;
          description "A unique name for this test session to be used
            as a key for this test session by the Session-Sender
            logical entity.";
        }
        leaf ctrlConnectionName {
          type string;
          config "false";
          description "The name of the parent control connection 
          that is responsible for negotiating this test session.";
        }
        leaf dscp {
          type inet:dscp;
          description "The DSCP value to be placed in the header of
            TWAMP UDP test packets generated by the sender."; 
        }
        leaf dot1dPriority {
          type uint8{
            range "0..7";
          }
          description "Priority Code Point (PCP) value to place in 
          the Ethernet header of the TWAMP UDP test frames transmitted 
          for this test session.";
        }
        leaf fillMode {
          type enumeration {
            enum zero;
            enum random;
          }
          description "Indicates whether the padding added to the UDP 
          test packets will contain pseudo-random numbers, or whether 
          it should consist of all zeroes.";
          default zero;
        }
        leaf numberOfPackets {
          type uint32;
          description "The overall number of UDP test packets to be
            transmitted by the sender for this test session.";
        }
        choice packetDistribution {
          description "Packet distributions, poisson or fixed";
          case fixed {
            leaf fixedInterval {
              type uint32;
              description "Fixed interval";
            }
            leaf fixedIntervalUnits  {
              type enumeration {
                enum seconds;
                enum milliseconds;
                enum microseconds;
                enum nanoseconds;
              }
              description "Fixed interval units";
            }
          }
          case poisson {
            leaf lambda{
              type uint32;
              description "The average rate of packet transmission.";
            }  
            leaf lambdaUnits{
              type uint32;
              description "Lambda units.";
            }  
            leaf maxInterval{
              type uint32;
              description "maximum time between packet transmissions.";
            }
            leaf truncationPointUnits{
              type enumeration {
                enum seconds;
                enum milliseconds;
                enum microseconds;
                enum nanoseconds;
              }
              description "Truncation point units";
            }
          }
        }
        leaf senderSessionState {
          type enumeration {
            enum setup {
              description "Test session is active.";
            }
            enum failure {
              description "Test session is idle.";
            }
          }
          config "false";
          description "Sender session state.";
        }
        uses maintenanceStatistics;
      }
    }
    
    container twampSessionReflector {
      description "Twamp session reflector container";
      if-feature sessionReflector;
      leaf refwait {
        type uint32 {
          range 1..604800;
        }
        default 900;
        description "REFWAIT(TWAMP test session timeout),
          the default value is 900";
      }
  
      list twampReflectorTestSession {
        description "Twamp reflector test sessions";
        key "senderIp senderUdpPort reflectorIp reflectorUdpPort";
        config "false";
        leaf sid{
          type string;
          description "An auto-allocated identifier for this test 
          session, that is unique within the context of this 
          Server/Session-Reflector device only. ";
        }
        leaf senderIp {
          type inet:ip-address;
          description "Sender IP address.";
        }
        leaf senderUdpPort {
          type inet:port-number;
          description "Sender UDP port.";
        }
        leaf reflectorIp {
          type inet:ip-address;
          description "Reflector IP address.";
        }
        leaf reflectorUdpPort {
          type inet:port-number;
          description "Reflector UDP port.";
        }
        leaf parentConnectionClientIp {
          type inet:ip-address;
          description "Parent connction client IP address.";
        }
        leaf parentConnectionClientTcpPort {
          type inet:port-number;
          description "Parent connection client TCP port.";
        }
        leaf parentConnectionServerIp {
          type inet:ip-address;
          description "Parent connection server IP address.";
        }
        leaf parentConnectionServerTcpPort {
          type inet:port-number;
          description "Parent connection server TCP port";
        }
        leaf dscp {
          type inet:dscp;
          description "The DSCP value placed in the header of TWAMP
            UDP test packets generated by the Session-Sender.";
        }
        uses maintenanceStatistics;
      }
    }
  }
}

